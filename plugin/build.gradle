plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.12.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.6.0'
}

gradlePlugin {
    plugins.register 'openapi-spring-generator', {
        id = 'com.github.slamdev.openapi-spring-generator'
        displayName = 'openapi-spring-generator'
        description = 'OpenAPI Generator for Java Spring framework'
        implementationClass = 'com.github.slamdev.openapispringgenerator.plugin.OpenApiSpringGeneratorPlugin'
    }
}

pluginBundle {
    website = 'https://github.com/slamdev/openapi-spring-generator'
    vcsUrl = 'https://github.com/slamdev/openapi-spring-generator.git'
    tags = ['openapi', 'swagger', 'spring']
}

dependencies {
    implementation project(':generator')
    shadow gradleApi()
    testImplementation 'junit:junit:4.13.1'
}

// needed to prevent inclusion of gradle-api into shadow JAR
configurations.compile.dependencies.remove dependencies.gradleApi()

task relocateShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation) {
    target = tasks.shadowJar
}

publishing {
    publications {
        withType(MavenPublication) { MavenPublication p ->
            p.pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.each() {
                    it.parent().remove(it)
                }
            }
//            p.setArtifacts([tasks.named('shadowJar').get()])
        }
    }
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

class TemplatesRemoveTransformer implements com.github.jengelman.gradle.plugins.shadow.transformers.Transformer {

    boolean canTransformResource(FileTreeElement element) {
        String path = element.relativePath.pathString
        if (path.endsWith('.class')
                || path.startsWith('handlebars/springcodegen/')
                || path.startsWith('META-INF/gradle-plugins')
        ) {
            return false
        }
        return true
    }

    void transform(com.github.jengelman.gradle.plugins.shadow.transformers.TransformerContext context) {}

    boolean hasTransformedResource() { return false }

    void modifyOutputStream(shadow.org.apache.tools.zip.ZipOutputStream jos, boolean preserveFileTimestamps) {}
}

shadowJar {
    minimize()
    transform(TemplatesRemoveTransformer)
    archiveClassifier.set('')
}

tasks.whenTaskAdded {
    if (name in ['publishPluginJar', 'generateMetadataFileForPluginMavenPublication', 'build']) {
        dependsOn(tasks.named('shadowJar'))
    }
}

// Disabling default jar task as it is overridden by shadowJar
tasks.named('jar').configure {
    enabled = false
}
