plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.1.0'
    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.0.13'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

gradlePlugin {
    plugins.register 'openapi-spring-generator', {
        id = 'com.github.slamdev.openapi-spring-generator'
        displayName = 'openapi-spring-generator'
        description = 'OpenAPI Generator for Java Spring framework'
        implementationClass = 'com.github.slamdev.openapispringgenerator.plugin.OpenApiSpringGeneratorPlugin'
    }
}

pluginBundle {
    website = 'https://github.com/slamdev/openapi-spring-generator'
    vcsUrl = 'https://github.com/slamdev/openapi-spring-generator.git'
    tags = ['openapi', 'swagger', 'spring']
}

dependencies {
    shadow gradleApi()
    implementation(project(':lib')) {
        // NOTE: gradle manages slf4j implementation
        exclude module: 'logback-classic'
        exclude module: 'logback-core'
        exclude module: 'slf4j-api'
        exclude module: 'slf4j-ext'
    }
    testImplementation 'junit:junit:4.13.2'
}

configurations.named(JavaPlugin.API_CONFIGURATION_NAME) {
    dependencies.remove(project.dependencies.gradleApi())
}

shadowJar {
    archiveClassifier.set('')
    mergeServiceFiles()
//    minimize {
//        exclude dependency('io.swagger.parser.v3:.*:.*')
//        exclude dependency('org.slf4j:.*:.*')
//    }
    exclude '/arguments/**/*'
    exclude '/mustache/**/*'
    exclude 'META-INF/services/io.swagger.codegen.v3.CodegenConfig'
    exclude 'META-INF/maven/**/*'
}

configurations.archives.artifacts.clear()
artifacts {
    archives tasks.shadowJar
}

task relocateShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation) {
    target = tasks.shadowJar
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

publishing {
    publications {
        pluginMaven(MavenPublication) {
            project.shadow.component(it)
            pom.withXml {
                asNode().get('dependencies').each { it.children().clear() }
            }
        }
    }
}
