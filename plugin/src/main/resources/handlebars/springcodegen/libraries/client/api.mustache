package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import java.util.Optional;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Collections;
import java.util.Collection;
import java.util.stream.Collectors;
import java.net.URI;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.core.io.Resource;
import org.springframework.boot.web.client.RestTemplateCustomizer;
import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.ListableBeanFactory;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

{{#operations}}
    @Component
    public class {{classname}} {

    public static final String REST_API_QUALIFIER = "rest-api";
    public static final String MODULE_SPECIFIC_QUALIFIER = "{{classname}}";

    private final RestTemplate restTemplate;

    public {{classname}}(RestTemplateBuilder builder, ListableBeanFactory factory, {{=<% %>=}}@Value("${<%vendorExtensions.x-path-variable-name%>}")<%={{ }}=%> String url) {
        List<ClientHttpRequestInterceptor> interceptors = factory.getBeansOfType(ClientHttpRequestInterceptor.class).entrySet().stream()
            .filter(e -> BeanFactoryAnnotationUtils.isQualifierMatch(s -> REST_API_QUALIFIER.equals(s) || MODULE_SPECIFIC_QUALIFIER.equals(s), e.getKey(), factory))
            .map(Map.Entry::getValue)
            .collect(Collectors.toList());
        List<RestTemplateCustomizer> customizers = factory.getBeansOfType(RestTemplateCustomizer.class).entrySet().stream()
            .filter(e -> BeanFactoryAnnotationUtils.isQualifierMatch(s -> REST_API_QUALIFIER.equals(s) || MODULE_SPECIFIC_QUALIFIER.equals(s), e.getKey(), factory))
            .map(Map.Entry::getValue)
            .collect(Collectors.toList());
        restTemplate = builder.rootUri(strip(url) + "/" + strip("{{{basePath}}}"))
            .additionalCustomizers(customizers)
            .additionalInterceptors(interceptors)
            .build();
    }

    private static String strip(String s) {
        return s.replaceAll("/$|^/", "");
    }

    private URI expand(String url, Map<String, Object> uriVariables) {
        URI uri = restTemplate.getUriTemplateHandler().expand(url, uriVariables);
        UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri);
        uriVariables.forEach((name, value) -> {
            if (value == null) {
                builder.replaceQueryParam(name);
            } else if (value instanceof Collection) {
                Collection collection = (Collection) value;
                builder.replaceQueryParam(name);
                if (!collection.isEmpty()) {
                    builder.queryParam(name, collection.toArray());
                }
            }
        });
        return builder.build(true).toUri();
    }

    private static List<MediaType> selectHeaderAccept(String[] accepts) {
        if (accepts.length == 0) {
            return null;
        }
        for (String accept : accepts) {
            MediaType mediaType = MediaType.parseMediaType(accept);
            if (isJsonMime(mediaType)) {
                return Collections.singletonList(mediaType);
            }
        }
        return MediaType.parseMediaTypes(StringUtils.arrayToCommaDelimitedString(accepts));
    }

    private static MediaType selectHeaderContentType(String[] contentTypes) {
        if (contentTypes.length == 0) {
            return MediaType.APPLICATION_JSON;
        }
        for (String contentType : contentTypes) {
            MediaType mediaType = MediaType.parseMediaType(contentType);
            if (isJsonMime(mediaType)) {
                return mediaType;
            }
        }
        return MediaType.parseMediaType(contentTypes[0]);
    }

    private static boolean isJsonMime(MediaType mediaType) {
        return mediaType != null && (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType) || mediaType.getSubtype().matches("^.*\\+json[;]?\\s*$"));
    }

    {{#operation}}
        {{#contents}}
            public ResponseEntity<{{>returnTypes}}> {{operationId}}Response(
            {{#parameters}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/parameters}}
            ) {
                Map<String, Object> _uriVariables = new HashMap<>();
                {{#pathParams}}
                _uriVariables.put("{{paramName}}", {{paramName}});
                {{/pathParams}}
                {{#queryParams}}
                _uriVariables.put("{{paramName}}", {{paramName}});
                {{/queryParams}}

                HttpHeaders _headers = new HttpHeaders();

                String[] _accepts = { {{#hasProduces}}
                {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}}{{/hasProduces}} };
                List<MediaType> _accept = selectHeaderAccept(_accepts);
                _headers.setAccept(_accept);

                String[] _contentTypes = { {{#hasConsumes}}
                {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}{{/hasConsumes}} };
                MediaType _contentType = selectHeaderContentType(_contentTypes);
                _headers.setContentType(_contentType);

                {{#headerParams}}
                _headers.set("{{baseName}}", {{paramName}}.toString());
                {{/headerParams}}

                Object _body = null;
                {{#bodyParam}}
                _body = {{paramName}};
                {{/bodyParam}}

                LinkedMultiValueMap<String, Object> _form = new LinkedMultiValueMap<>();
                {{#formParams}}
                _form.add("{{paramName}}", {{paramName}});
                {{/formParams}}

                HttpEntity<Object> _entity = new HttpEntity<>(_form.isEmpty() ? _body : _form, _headers);

                {{#returnContainer}}
                ParameterizedTypeReference<{{>returnTypes}}> _responseType = new ParameterizedTypeReference<{{>returnTypes}}>() {};
                {{/returnContainer}}
                {{^returnContainer}}
                Class<{{>returnTypes}}> _responseType = {{>returnTypes}}.class;
                {{/returnContainer}}

                String _url = "{{{path}}}{{#hasQueryParams}}?{{/hasQueryParams}}{{#queryParams}}{{baseName}}={{=<% %>=}}{<%paramName%>}<%={{ }}=%>{{#hasMore}}&{{/hasMore}}{{/queryParams}}";

                return restTemplate.exchange(expand(_url, _uriVariables), HttpMethod.{{httpMethod}}, _entity, _responseType);
            }

            public {{#vendorExtensions.x-void}}void{{/vendorExtensions.x-void}}{{^vendorExtensions.x-void}}{{>returnTypes}}{{/vendorExtensions.x-void}} {{operationId}}(
                {{#parameters}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/parameters}}
            ) {
                ResponseEntity<{{>returnTypes}}> response = {{operationId}}Response({{#parameters}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/parameters}});
                {{^vendorExtensions.x-void}}return response.getBody();{{/vendorExtensions.x-void}}
            }
        {{/contents}}
    {{/operation}}
    }
{{/operations}}
