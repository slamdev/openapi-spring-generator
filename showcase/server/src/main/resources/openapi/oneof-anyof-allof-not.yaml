openapi: "3.0.0"
info:
  version: 1.0.0
  title: OneOf & AnyOf & AllOf & Not examples
x-package-name: com.github.slamdev.openapispringgenerator.showcase.server.api
x-api-name-prefix: OneOfAnyOfAllOfNot
x-path-variable-name: server.url
servers:
  - url: /api/oneof-anyof-allof-not
paths:
  /oneof:
    patch:
      operationId: oneof
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatOrDog'
      responses:
        '200':
          description: Updated
  /allof:
    patch:
      operationId: allof
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CowAndMice'
      responses:
        '200':
          description: Updated
  /anyof:
    patch:
      operationId: anyof
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetByAgeOrByType'
      responses:
        '200':
          description: Updated
  /not:
    patch:
      operationId: not
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetByGender'
      responses:
        '200':
          description: Updated
components:
  schemas:
    CatOrDog:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
    Dog:
      type: object
      properties:
        bark:
          type: boolean
        breed:
          type: string
          enum: [ Dingo, Husky, Retriever, Shepherd ]
    Cat:
      type: object
      properties:
        hunts:
          type: boolean
        age:
          type: integer
    CowAndMice:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Cow'
        - $ref: '#/components/schemas/Mice'
      discriminator:
        propertyName: pet_type
    SuperPet:
      type: object
      required:
        - pet_type
      properties:
        pet_type:
          type: string
      discriminator:
        propertyName: pet_type
    Cow: # "Cow" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Cow`-specific properties
        - $ref: '#/components/schemas/SuperPet'
        - type: object
          # all other properties specific to a `Cow`
          properties:
            milk:
              type: boolean
            breed:
              type: string
              enum: [ Wild, Domestic ]
    Mice: # "Mice" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Mice`-specific properties
        - $ref: '#/components/schemas/SuperPet'
        - type: object
          # all other properties specific to a `Mice`
          properties:
            hunts:
              type: boolean
            age:
              type: integer
    PetByAgeOrByType:
      type: object
      anyOf:
        - $ref: '#/components/schemas/PetByAge'
        - $ref: '#/components/schemas/PetByType'
    PetByAge:
      type: object
      properties:
        age:
          type: integer
        nickname:
          type: string
      required:
        - age
    PetByType:
      type: object
      properties:
        pet_type:
          type: string
          enum: [ Cat, Dog ]
        hunts:
          type: boolean
      required:
        - pet_type
    PetByGender:
      type: object
      properties:
        pet_gender:
          type: object
          not:
            type: integer
      required:
        - pet_gender
