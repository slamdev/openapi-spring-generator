package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import java.util.Optional;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.core.io.Resource;

{{#operations}}
@RestController
@RequestMapping(value = "{{{basePath}}}")
public interface {{classname}} {

{{#operation}}
    {{#contents}}
    @RequestMapping(
            value = "{{{path}}}",{{#hasProduces}}
            produces = { {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} },{{/hasProduces}}{{#hasConsumes}}
            consumes = { {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} },{{/hasConsumes}}
            method = RequestMethod.{{httpMethod}}
    ){{#vendorExtensions.x-security-role}}
    @org.springframework.security.access.annotation.Secured("{{vendorExtensions.x-security-role}}"){{/vendorExtensions.x-security-role}}
    default ResponseEntity<{{>returnTypes}}> {{operationId}}Api({{#parameters}}
        {{>queryParams}}{{>pathParams}}{{>headerParams}}{{>cookieParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}}, {{/hasMore}}{{/parameters}}
    ) {
    {{#vendorExtensions.x-void}}
        {{operationId}}({{#parameters}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/parameters}});
        return toResponse({{{vendorExtensions.x-response-code}}});
    {{/vendorExtensions.x-void}}
    {{^vendorExtensions.x-void}}
        return toResponse({{operationId}}({{#parameters}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/parameters}}), {{{vendorExtensions.x-response-code}}});
    {{/vendorExtensions.x-void}}
    }

    {{#vendorExtensions.x-void}}void{{/vendorExtensions.x-void}}{{^vendorExtensions.x-void}}{{>returnTypes}}{{/vendorExtensions.x-void}} {{operationId}}({{#parameters}}{{^isBinary}}{{>optionalDataType}}{{/isBinary}}{{#isBinary}}MultipartFile{{/isBinary}} {{paramName}}{{#hasMore}},{{/hasMore}}{{/parameters}});

    {{/contents}}
{{/operation}}

    default <T> ResponseEntity<T> toResponse(T result, int status) {
        return new ResponseEntity<>(result, HttpStatus.resolve(status));
    }

    default ResponseEntity<Void> toResponse(int status) {
        return new ResponseEntity<Void>(HttpStatus.resolve(status));
    }
}
{{/operations}}
