package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import java.util.Optional;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Collections;
import java.net.URI;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.core.io.Resource;

{{#operations}}
    public class {{classname}} {

    {{#operation}}
        {{#contents}}
            /**
             * {{summary}}
             * {{notes}}
          {{#allParams}}   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
          {{/allParams}}   * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
             */
            public ResponseEntity<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{nickname}}Response(
                {{#allParams}}{{#isFile}} Resource {{baseName}}{{/isFile}}{{^isFile}}{{{dataType}}} {{paramName}}{{/isFile}}{{#hasMore}}, {{/hasMore}}{{/allParams}}
            ) {
                String _url = "{{{path}}}{{#hasQueryParams}}?{{/hasQueryParams}}{{#queryParams}}{{baseName}}={{=<% %>=}}{<%paramName%>}<%={{ }}=%>{{#hasMore}}&{{/hasMore}}{{/queryParams}}";
                HttpMethod _method = HttpMethod.{{httpMethod}};
                HttpHeaders _headers = new HttpHeaders();
                _headers.setContentType(MediaType.parseMediaType("{{vendorExtensions.x-contentType}}"));
                _headers.setAccept(Collections.singletonList(MediaType.parseMediaType("{{vendorExtensions.x-accepts}}")));
                {{#headerParams}}
                _headers.set("{{baseName}}", {{paramName}}.toString());
                {{/headerParams}}
                Object _body = null;
                {{#bodyParam}}
                _body = {{paramName}};
                {{/bodyParam}}
                LinkedMultiValueMap<String, Object> _form = new LinkedMultiValueMap<>();
                {{#formParams}}
                _form.add("{{paramName}}", {{paramName}});
                {{/formParams}}
                HttpEntity<Object> _entity = new HttpEntity<>(_form.isEmpty() ? _body : _form, _headers);
                Map<String, Object> _uriVariables = new HashMap<>();
                {{#pathParams}}
                _uriVariables.put("{{paramName}}", {{paramName}});
                {{/pathParams}}
                {{#queryParams}}
                _uriVariables.put("{{paramName}}", {{paramName}});
                {{/queryParams}}
                {{#returnContainer}}
                ParameterizedTypeReference<{{{returnType}}}> _responseType = new ParameterizedTypeReference<{{{returnType}}}>() {};
                {{/returnContainer}}
                {{^returnContainer}}
                Class<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> _responseType = {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}.class;
                {{/returnContainer}}
                return restTemplate.exchange(expand(_url, _uriVariables), _method, _entity, _responseType);
            }

            /**
             * {{summary}}
             * {{notes}}
          {{#allParams}}   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
          {{/allParams}}   * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
             */
            public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}}(
                {{#allParams}}{{#isFile}} Resource {{baseName}}{{/isFile}}{{^isFile}}{{{dataType}}} {{paramName}}{{/isFile}}{{#hasMore}}, {{/hasMore}}{{/allParams}}
            ) {
                ResponseEntity<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> response = {{nickname}}Response({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
                {{#returnType}}return response.getBody();{{/returnType}}
            }
        {{/contents}}
    {{/operation}}
    }
{{/operations}}
