plugins {
    id 'base'
    id 'idea'
}

allprojects {
    group 'com.github.slamdev.openapispringgenerator'
}

subprojects {
    plugins.withId('java') {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17

        compileJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
        }
        compileTestJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
        }
        repositories {
            mavenCentral()
        }
    }

    plugins.withId('pmd') {
        pmd {
            toolVersion = '6.50.0'
            ignoreFailures = false
            consoleOutput = false
        }
        tasks.withType(Pmd) {
            if (name == 'pmdMain') {
                source = 'src/main/java'
                ruleSetFiles = files('gradle/lint/pmd/ruleSetMain.xml')
                ruleSets = []
            } else {
                ruleSetFiles = files('gradle/lint/pmd/ruleSetTest.xml')
                ruleSets = []
            }
            exclude '**/api/**'
            exclude '**/stream/**'
        }
    }

    plugins.withId('checkstyle') {
        checkstyle {
            toolVersion = '10.3.4'
            ignoreFailures = false
            showViolations = false
        }
        tasks.withType(Checkstyle) {
            if (name == 'checkstyleMain') {
                source = 'src/main/java'
                configFile = file('gradle/lint/checkstyle/checkstyleMain.xml')
            } else {
                configFile = file('gradle/lint/checkstyle/checkstyleTest.xml')
            }
            exclude '**/api/**'
            exclude '**/stream/**'
        }
        dependencies {
            checkstyle 'com.thomasjensen.checkstyle.addons:checkstyle-addons:7.0.1'
            checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.43.0'
        }
    }

    plugins.withId('com.github.spotbugs') {
        spotbugs {
            toolVersion = '4.7.2'
            ignoreFailures = false
            effort = 'max'
            reportLevel = 'low'
        }
        tasks.withType(VerificationTask) {
            if (name.startsWith('spotbugs')) {
                if (name == 'spotbugsMain') {
                    excludeFilter = file('gradle/lint/findbugs/excludeMain.xml')
                } else {
                    excludeFilter = file('gradle/lint/findbugs/excludeTest.xml')
                }
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }
        }
    }
}
