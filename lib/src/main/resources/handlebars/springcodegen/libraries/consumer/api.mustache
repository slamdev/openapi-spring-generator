package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import lombok.extern.slf4j.Slf4j;
import lombok.experimental.UtilityClass;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.support.Acknowledgment;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.handler.annotation.Headers;
import org.springframework.messaging.handler.annotation.Payload;

import java.util.Map;
import java.util.stream.Collectors;

{{#operations}}
@Slf4j
@UtilityClass
public class {{classname}} {

{{#operation}}
    {{#contents}}
    public interface {{{vendorExtensions.x-topic-class}}} {

        String {{{vendorExtensions.x-topic-const}}} = "{{{vendorExtensions.x-topic-name}}}";

        @KafkaListener(topics = {{{vendorExtensions.x-topic-const}}},
                       autoStartup = "${spring.kafka.listener.auto-startup:true}",
                       properties = {
                         "spring.json.value.default.type={{package}}.{{>returnTypes}}",
                         "spring.json.type.mapping=event:{{package}}.{{>returnTypes}}",
                         "spring.json.trusted.packages={{package}}",
                       }
        )
        default void {{operationId}}Ack(@Payload {{>returnTypes}} event, @Headers MessageHeaders headers) {
            if (log.isDebugEnabled()) {
                Map<String, Object> filtered = headers.entrySet().stream()
                    .filter(e -> !KafkaHeaders.ACKNOWLEDGMENT.equals(e.getKey()))
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
                log.debug("new messages received from '{}' topic: '{}' with headers: '{}'", {{{vendorExtensions.x-topic-const}}}, event, filtered);
            }
            {{operationId}}(event, headers);
            Acknowledgment acknowledgment = headers.get(KafkaHeaders.ACKNOWLEDGMENT, Acknowledgment.class);
            if (acknowledgment != null) {
                acknowledgment.acknowledge();
            }
        }

        void {{operationId}}({{>returnTypes}} event, MessageHeaders headers);
    }
    {{/contents}}
{{/operation}}
}
{{/operations}}
